DROP TABLE IF EXISTS Credentials;
DROP TABLE IF EXISTS UserLevel;
DROP TABLE IF EXISTS MedicalProfessional;
DROP TABLE IF EXISTS Doctor;
DROP TABLE IF EXISTS Speciality;
DROP TABLE IF EXISTS Pharmacist;
DROP TABLE IF EXISTS Nurse;
DROP TABLE IF EXISTS Patient;
DROP TABLE IF EXISTS PatientNotes;
DROP TABLE IF EXISTS MedicationEntry;
DROP TABLE IF EXISTS ProfileLog;
DROP TABLE IF EXISTS Gender;
DROP TABLE IF EXISTS Province;
DROP TABLE IF EXISTS GovernmentBody;
DROP TABLE IF EXISTS HospitalAdministrator;
DROP TABLE IF EXISTS Billing;
DROP TABLE IF EXISTS Technician;
DROP TABLE IF EXISTS MedicalSecretary;
DROP TABLE IF EXISTS Payroll;
DROP TABLE IF EXISTS PayrollStatus;
DROP TABLE IF EXISTS TestType;
DROP TABLE IF EXISTS LabTest;
DROP TABLE IF EXISTS LabResult;
DROP TABLE IF EXISTS LabRequest;

CREATE TABLE IF NOT EXISTS Credentials (
    credentialsID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    username TEXT NOT NULL,
    password TEXT NOT NULL,
    userLevelID INTEGER NOT NULL,
    
    FOREIGN KEY (userLevelID) REFERENCES UserLevel(userLevelID)
);

CREATE TABLE IF NOT EXISTS UserLevel (
    userLevelID INTEGER PRIMARY KEY NOT NULL,
    userLevelName TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS MedicalProfessional (
    medProID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
);

CREATE TABLE IF NOT EXISTS Doctor (
    doctorID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    medProID INTEGER NOT NULL,
    crendentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    specialist INTEGER NOT NULL,
    specialityID INTEGER,
    
    FOREIGN KEY (medProID) REFERENCES MedicalProfessional(medProID),
    FOREIGN KEY (specialityID) REFERENCES Speciality(specialityID),
    FOREIGN KEY (crendentialsID) REFERENCES Credentials(crendentialsID),
    CHECK (specialist >= 0 AND specialist <= 1)
);

CREATE TABLE IF NOT EXISTS Speciality (
    specialityID INTEGER PRIMARY KEY NOT NULL,
    speciality TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Pharmacist (
    pharmacistID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    medProID INTEGER NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,

    FOREIGN KEY (medProID) REFERENCES MedicalProfessional(medProID),
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS Nurse (
    nurseID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    medProID INTEGER NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,

    FOREIGN KEY (medProID) REFERENCES MedicalProfessional(medProID),
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS GovernmentBody (
    governmentBodyID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS HospitalAdministrator (
    hospitalAdministratorID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS Patient (
    patientID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    federalHealthID INTEGER NOT NULL,
    provinceID INTEGER NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    genderID INTEGER NOT NULL,
    dateOfBirth DATE NOT NULL,
    age INTEGER NOT NULL,
    height TEXT NOT NULL,
    weight TEXT NOT NULL,
    familyPhysicianID INTEGER NOT NULL,
    temp INTEGER NOT NULL,
    
    FOREIGN KEY (provinceID) REFERENCES Province(provinceID),
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID),
    FOREIGN KEY (genderID) REFERENCES Gender(genderID),
    FOREIGN KEY (familyPhysicianID) REFERENCES MedicalProfessional(medProID),
    CHECK (temp >= 0 AND temp <= 1)
);

CREATE TABLE IF NOT EXISTS MedicationEntry (
    medicationEntryID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    icd10 TEXT NOT NULL,
    patientID INTEGER NOT NULL,
    
    FOREIGN KEY (patientID) REFERENCES Patient(patientID)
);

CREATE TABLE IF NOT EXISTS ProfileLog (
    profileLogID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    patientID INTEGER NOT NULL,
    viewerID INTEGER NOT NULL,
    dateOfView DATETIME NOT NULL,
        
    FOREIGN KEY (patientID) REFERENCES Patient(patientID),
    FOREIGN KEY (viewerID) REFERENCES Credentials(credentialsID)
);

CREATE TABLE IF NOT EXISTS Gender (
    genderID INTEGER PRIMARY KEY NOT NULL,
    gender TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Province (
    provinceID INTEGER PRIMARY KEY NOT NULL,
    province TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PatientNotes (
    notesID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    patientID INTEGER NOT NULL,
    authorID INTEGER NOT NULL,
    dateOfEntry DATETIME NOT NULL,
    textbody TEXT NOT NULL,
    image TEXT,
    
    FOREIGN KEY (patientID) REFERENCES Credentials(credentialsID),
    FOREIGN KEY (authorID) REFERENCES MedicalProfessional(medProID)
);

CREATE TABLE IF NOT EXISTS Billing (
    billingID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    medicalSecretaryID INTEGER NOT NULL,
    patientID INTEGER NOT NULL,
    datetime dateOfEntry NOT NULL,
    billingCode INTEGER NOT NULL,
    
    FOREIGN KEY (medicalSecretaryID) REFERENCES MedicalSecretary(medicalSecretaryID),
    FOREIGN KEY (patientID) REFERENCES Patient(patientID)
);

CREATE TABLE IF NOT EXISTS Technician (
    technicianID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS MedicalSecretary (
    medicalSecretaryID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    credentialsID INTEGER NOT NULL,
    name TEXT NOT NULL,
    
    FOREIGN KEY (credentialsID) REFERENCES Credentials(crendentialsID)
);

CREATE TABLE IF NOT EXISTS Payroll (
    payrollID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    userID INTEGER NOT NULL,
    statusID INTEGER NOT NULL,
    payDate DATETIME NOT NULL,
    runBy TEXT,
    paycycleStart DATETIME NOT NULL,
    paycycleEnd DATETIME NOT NULL,
    total REAL NOT NULL,
    
    FOREIGN KEY (userID) REFERENCES Credentials(crendentialsID),
    FOREIGN KEY (statusID) REFERENCES PayrollStatus(statusID)
);

CREATE TABLE IF NOT EXISTS PayrollStatus (
    statusID INTEGER PRIMARY KEY NOT NULL,
    status TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS TestType (
    testTypeID INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS LabTest (
    labTestID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    requesterID INTEGER NOT NULL,
    technicianID INTEGER NOT NULL,
    testTypeID INTEGER NOT NULL,
    
    FOREIGN KEY (requesterID) REFERENCES MedicalProfessional(medProID),
    FOREIGN KEY (technicianID) REFERENCES Technician(technicianID),
    FOREIGN KEY (testTypeID) REFERENCES TestType(testTypeID)
);

CREATE TABLE IF NOT EXISTS LabResult (
    labResultID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    labTestID INTEGER NOT NULL,
    finishDate DATETIME NOT NULL,
    results TEXT NOT NULL,
    image TEXT,
    
    FOREIGN KEY (labTestID) REFERENCES LabTest(labTestID)
);

CREATE TABLE IF NOT EXISTS LabRequest (
    labRequestID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    labTestID INTEGER NOT NULL,
    requestDate DATETIME NOT NULL,
    
    FOREIGN KEY (labTestID) REFERENCES LabTest(labTestID)
);